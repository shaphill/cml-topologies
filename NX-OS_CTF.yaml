annotations: []
nodes:
  - boot_disk_size: null
    configuration: NAT
    cpu_limit: null
    cpus: null
    data_volume: null
    hide_links: false
    id: n0
    image_definition: null
    label: bridge
    node_definition: external_connector
    ram: null
    tags: []
    x: -40
    y: -120
    interfaces:
      - id: i0
        label: port
        slot: 0
        type: physical
  - boot_disk_size: null
    configuration: null
    cpu_limit: null
    cpus: null
    data_volume: null
    hide_links: true
    id: n1
    image_definition: null
    label: mgmt
    node_definition: unmanaged_switch
    ram: null
    tags: []
    x: -40
    y: 0
    interfaces:
      - id: i0
        label: port0
        slot: 0
        type: physical
      - id: i1
        label: port1
        slot: 1
        type: physical
      - id: i2
        label: port2
        slot: 2
        type: physical
      - id: i3
        label: port3
        slot: 3
        type: physical
      - id: i4
        label: port4
        slot: 4
        type: physical
      - id: i5
        label: port5
        slot: 5
        type: physical
      - id: i6
        label: port6
        slot: 6
        type: physical
      - id: i7
        label: port7
        slot: 7
        type: physical
  - boot_disk_size: null
    configuration: |-
      hostname inserthostname-here
      # workaround for booting to loader> prompt
      echo 'from cli import cli' > set_boot.py
      echo 'import json' >> set_boot.py
      echo 'import os' >> set_boot.py
      echo 'import time' >> set_boot.py
      echo 'bootimage = json.loads(cli("show version | json"))["kick_file_name"]' >> set_boot.py
      echo 'set_boot = cli("conf t ; boot nxos {} ; no event manager applet BOOTCONFIG".format(bootimage))' >> set_boot.py
      echo 'i = 0' >> set_boot.py
      echo 'while i < 10:' >> set_boot.py
      echo '    try:' >> set_boot.py
      echo '        save_config = cli("copy running-config startup-config")' >> set_boot.py
      echo '        break' >> set_boot.py
      echo '    except Exception:' >> set_boot.py
      echo '        i += 1' >> set_boot.py
      echo '        time.sleep(1)' >> set_boot.py
      echo 'os.remove("/bootflash/set_boot.py")' >> set_boot.py
      event manager applet BOOTCONFIG
       event syslog pattern "Configured from vty"
       action 1.0 cli python bootflash:set_boot.py
      # minimum needed config to login
      no password strength-check
      username admin role network-admin
      username admin password C1sco12345 role network-admin
      username cisco role network-admin
      username cisco password cisco role network-admin
      conf t
      int mgmt0
      ip address 198.18.133.10/18
      ip route 0.0.0.0/0 198.18.128.0/18
    cpu_limit: null
    cpus: null
    data_volume: null
    hide_links: false
    id: n2
    image_definition: null
    label: S1
    node_definition: nxosv9000
    ram: null
    tags: []
    x: -120
    y: 120
    interfaces:
      - id: i0
        label: Loopback0
        type: loopback
      - id: i1
        label: mgmt0
        slot: 0
        type: physical
      - id: i2
        label: Ethernet1/1
        slot: 1
        type: physical
      - id: i3
        label: Ethernet1/2
        slot: 2
        type: physical
      - id: i4
        label: Ethernet1/3
        slot: 3
        type: physical
  - boot_disk_size: null
    configuration: |-
      hostname inserthostname-here
      # workaround for booting to loader> prompt
      echo 'from cli import cli' > set_boot.py
      echo 'import json' >> set_boot.py
      echo 'import os' >> set_boot.py
      echo 'import time' >> set_boot.py
      echo 'bootimage = json.loads(cli("show version | json"))["kick_file_name"]' >> set_boot.py
      echo 'set_boot = cli("conf t ; boot nxos {} ; no event manager applet BOOTCONFIG".format(bootimage))' >> set_boot.py
      echo 'i = 0' >> set_boot.py
      echo 'while i < 10:' >> set_boot.py
      echo '    try:' >> set_boot.py
      echo '        save_config = cli("copy running-config startup-config")' >> set_boot.py
      echo '        break' >> set_boot.py
      echo '    except Exception:' >> set_boot.py
      echo '        i += 1' >> set_boot.py
      echo '        time.sleep(1)' >> set_boot.py
      echo 'os.remove("/bootflash/set_boot.py")' >> set_boot.py
      event manager applet BOOTCONFIG
       event syslog pattern "Configured from vty"
       action 1.0 cli python bootflash:set_boot.py
      # minimum needed config to login
      no password strength-check
      username admin role network-admin
      username admin password C1sco12345 role network-admin
      username cisco role network-admin
      username cisco password cisco role network-admin
      conf t
      int mgmt0
      ip address 198.18.133.11/18
      ip route 0.0.0.0/0 198.18.128.0/18
    cpu_limit: null
    cpus: null
    data_volume: null
    hide_links: false
    id: n3
    image_definition: null
    label: S2
    node_definition: nxosv9000
    ram: null
    tags: []
    x: 40
    y: 120
    interfaces:
      - id: i0
        label: Loopback0
        type: loopback
      - id: i1
        label: mgmt0
        slot: 0
        type: physical
      - id: i2
        label: Ethernet1/1
        slot: 1
        type: physical
      - id: i3
        label: Ethernet1/2
        slot: 2
        type: physical
      - id: i4
        label: Ethernet1/3
        slot: 3
        type: physical
  - boot_disk_size: null
    configuration: |-
      hostname inserthostname-here
      # workaround for booting to loader> prompt
      echo 'from cli import cli' > set_boot.py
      echo 'import json' >> set_boot.py
      echo 'import os' >> set_boot.py
      echo 'import time' >> set_boot.py
      echo 'bootimage = json.loads(cli("show version | json"))["kick_file_name"]' >> set_boot.py
      echo 'set_boot = cli("conf t ; boot nxos {} ; no event manager applet BOOTCONFIG".format(bootimage))' >> set_boot.py
      echo 'i = 0' >> set_boot.py
      echo 'while i < 10:' >> set_boot.py
      echo '    try:' >> set_boot.py
      echo '        save_config = cli("copy running-config startup-config")' >> set_boot.py
      echo '        break' >> set_boot.py
      echo '    except Exception:' >> set_boot.py
      echo '        i += 1' >> set_boot.py
      echo '        time.sleep(1)' >> set_boot.py
      echo 'os.remove("/bootflash/set_boot.py")' >> set_boot.py
      event manager applet BOOTCONFIG
       event syslog pattern "Configured from vty"
       action 1.0 cli python bootflash:set_boot.py
      # minimum needed config to login
      no password strength-check
      username admin role network-admin
      username admin password C1sco12345 role network-admin
      username cisco role network-admin
      username cisco password cisco role network-admin
      conf t
      int mgmt0
      ip address 198.18.133.12/18
      ip route 0.0.0.0/0 198.18.128.0/18
    cpu_limit: null
    cpus: null
    data_volume: null
    hide_links: false
    id: n4
    image_definition: null
    label: L2
    node_definition: nxosv9000
    ram: null
    tags: []
    x: -40
    y: 240
    interfaces:
      - id: i0
        label: Loopback0
        type: loopback
      - id: i1
        label: mgmt0
        slot: 0
        type: physical
      - id: i2
        label: Ethernet1/1
        slot: 1
        type: physical
      - id: i3
        label: Ethernet1/2
        slot: 2
        type: physical
      - id: i4
        label: Ethernet1/3
        slot: 3
        type: physical
  - boot_disk_size: null
    configuration: |-
      hostname inserthostname-here
      # workaround for booting to loader> prompt
      echo 'from cli import cli' > set_boot.py
      echo 'import json' >> set_boot.py
      echo 'import os' >> set_boot.py
      echo 'import time' >> set_boot.py
      echo 'bootimage = json.loads(cli("show version | json"))["kick_file_name"]' >> set_boot.py
      echo 'set_boot = cli("conf t ; boot nxos {} ; no event manager applet BOOTCONFIG".format(bootimage))' >> set_boot.py
      echo 'i = 0' >> set_boot.py
      echo 'while i < 10:' >> set_boot.py
      echo '    try:' >> set_boot.py
      echo '        save_config = cli("copy running-config startup-config")' >> set_boot.py
      echo '        break' >> set_boot.py
      echo '    except Exception:' >> set_boot.py
      echo '        i += 1' >> set_boot.py
      echo '        time.sleep(1)' >> set_boot.py
      echo 'os.remove("/bootflash/set_boot.py")' >> set_boot.py
      event manager applet BOOTCONFIG
       event syslog pattern "Configured from vty"
       action 1.0 cli python bootflash:set_boot.py
      # minimum needed config to login
      no password strength-check
      username admin role network-admin
      username admin password C1sco12345 role network-admin
      username cisco role network-admin
      username cisco password cisco role network-admin
      conf t
      int mgmt0
      ip address 198.18.133.13/18
      ip route 0.0.0.0/0 198.18.128.0/18
    cpu_limit: null
    cpus: null
    data_volume: null
    hide_links: false
    id: n5
    image_definition: null
    label: L1
    node_definition: nxosv9000
    ram: null
    tags: []
    x: -200
    y: 240
    interfaces:
      - id: i0
        label: Loopback0
        type: loopback
      - id: i1
        label: mgmt0
        slot: 0
        type: physical
      - id: i2
        label: Ethernet1/1
        slot: 1
        type: physical
      - id: i3
        label: Ethernet1/2
        slot: 2
        type: physical
      - id: i4
        label: Ethernet1/3
        slot: 3
        type: physical
  - boot_disk_size: null
    configuration: |-
      hostname inserthostname-here
      # workaround for booting to loader> prompt
      echo 'from cli import cli' > set_boot.py
      echo 'import json' >> set_boot.py
      echo 'import os' >> set_boot.py
      echo 'import time' >> set_boot.py
      echo 'bootimage = json.loads(cli("show version | json"))["kick_file_name"]' >> set_boot.py
      echo 'set_boot = cli("conf t ; boot nxos {} ; no event manager applet BOOTCONFIG".format(bootimage))' >> set_boot.py
      echo 'i = 0' >> set_boot.py
      echo 'while i < 10:' >> set_boot.py
      echo '    try:' >> set_boot.py
      echo '        save_config = cli("copy running-config startup-config")' >> set_boot.py
      echo '        break' >> set_boot.py
      echo '    except Exception:' >> set_boot.py
      echo '        i += 1' >> set_boot.py
      echo '        time.sleep(1)' >> set_boot.py
      echo 'os.remove("/bootflash/set_boot.py")' >> set_boot.py
      event manager applet BOOTCONFIG
       event syslog pattern "Configured from vty"
       action 1.0 cli python bootflash:set_boot.py
      # minimum needed config to login
      no password strength-check
      username admin role network-admin
      username admin password C1sco12345 role network-admin
      username cisco role network-admin
      username cisco password cisco role network-admin
      conf t
      int mgmt0
      ip address 198.18.133.14/18
      ip route 0.0.0.0/0 198.18.128.0/18
    cpu_limit: null
    cpus: null
    data_volume: null
    hide_links: false
    id: n6
    image_definition: null
    label: L3
    node_definition: nxosv9000
    ram: null
    tags: []
    x: 120
    y: 240
    interfaces:
      - id: i0
        label: Loopback0
        type: loopback
      - id: i1
        label: mgmt0
        slot: 0
        type: physical
      - id: i2
        label: Ethernet1/1
        slot: 1
        type: physical
      - id: i3
        label: Ethernet1/2
        slot: 2
        type: physical
      - id: i4
        label: Ethernet1/3
        slot: 3
        type: physical
links:
  - id: l0
    n1: n0
    n2: n1
    i1: i0
    i2: i0
    conditioning: {}
    label: bridge-port<->mgmt-port0
  - id: l1
    n1: n1
    n2: n2
    i1: i1
    i2: i1
    conditioning: {}
    label: mgmt-port1<->nxos9000-0-mgmt0
  - id: l2
    n1: n1
    n2: n3
    i1: i2
    i2: i1
    conditioning: {}
    label: mgmt-port2<->nxos9000-1-mgmt0
  - id: l3
    n1: n1
    n2: n5
    i1: i3
    i2: i1
    conditioning: {}
    label: mgmt-port3<->nxos9000-3-mgmt0
  - id: l4
    n1: n1
    n2: n4
    i1: i4
    i2: i1
    conditioning: {}
    label: mgmt-port4<->nxos9000-2-mgmt0
  - id: l5
    n1: n1
    n2: n6
    i1: i5
    i2: i1
    conditioning: {}
    label: mgmt-port5<->nxos9000-4-mgmt0
  - id: l6
    n1: n2
    n2: n5
    i1: i2
    i2: i2
    conditioning: {}
    label: nxos9000-0-Ethernet1/1<->nxos9000-3-Ethernet1/1
  - id: l7
    n1: n2
    n2: n4
    i1: i3
    i2: i2
    conditioning: {}
    label: nxos9000-0-Ethernet1/2<->nxos9000-2-Ethernet1/1
  - id: l8
    n1: n2
    n2: n6
    i1: i4
    i2: i2
    conditioning: {}
    label: nxos9000-0-Ethernet1/3<->nxos9000-4-Ethernet1/1
  - id: l9
    n1: n3
    n2: n5
    i1: i2
    i2: i3
    conditioning: {}
    label: nxos9000-1-Ethernet1/1<->nxos9000-3-Ethernet1/2
  - id: l10
    n1: n3
    n2: n4
    i1: i3
    i2: i3
    conditioning: {}
    label: nxos9000-1-Ethernet1/2<->nxos9000-2-Ethernet1/2
  - id: l11
    n1: n3
    n2: n6
    i1: i4
    i2: i3
    conditioning: {}
    label: nxos9000-1-Ethernet1/3<->nxos9000-4-Ethernet1/2
lab:
  description: ''
  notes: ''
  title: NX-OS CTF
  version: 0.2.1
